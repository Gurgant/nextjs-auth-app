name: 📦 Automated Dependency Updates

on:
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'minor'
        type: choice
        options:
          - minor
          - patch
          - major

jobs:
  dependency-updates:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 📦 Install current dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Check for outdated packages
        id: outdated
        run: |
          echo "Checking for outdated packages..."
          pnpm outdated --long > outdated.txt 2>/dev/null || true
          
          if [[ -s outdated.txt ]]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "## 📦 Outdated Packages" >> outdated_summary.md
            echo "\`\`\`" >> outdated_summary.md
            head -20 outdated.txt >> outdated_summary.md
            echo "\`\`\`" >> outdated_summary.md
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "✅ All packages are up to date!" >> outdated_summary.md
          fi

      - name: 📈 Update dependencies
        if: steps.outdated.outputs.has_updates == 'true'
        run: |
          echo "🔄 Updating dependencies..."
          
          case "${{ github.event.inputs.update_type || 'minor' }}" in
            "patch")
              echo "Updating patch versions only..."
              pnpm update --latest --filter='*'
              ;;
            "minor") 
              echo "Updating minor and patch versions..."
              pnpm update --latest
              ;;
            "major")
              echo "⚠️ Updating major versions (use with caution)..."
              pnpm update --latest
              ;;
          esac

      - name: 🔒 Security audit
        if: steps.outdated.outputs.has_updates == 'true'
        run: |
          echo "🔍 Running security audit..."
          if pnpm audit --audit-level moderate; then
            echo "✅ No security vulnerabilities detected"
            echo "security_status=clean" >> $GITHUB_ENV
          else
            echo "⚠️ Security vulnerabilities found - attempting auto-fix..."
            pnpm audit --fix || true
            echo "security_status=fixed" >> $GITHUB_ENV
          fi

      - name: 🧪 Run tests after updates
        if: steps.outdated.outputs.has_updates == 'true'
        run: |
          echo "🧪 Running tests to verify updates..."
          pnpm typecheck
          pnpm lint
          pnpm format:check
          pnpm validate-translations

      - name: 📊 Generate update summary
        if: steps.outdated.outputs.has_updates == 'true'
        run: |
          echo "## 📦 Dependency Update Summary" > update_summary.md
          echo "" >> update_summary.md
          echo "**Update Type**: ${{ github.event.inputs.update_type || 'minor' }}" >> update_summary.md
          echo "**Generated**: $(date -u)" >> update_summary.md
          echo "" >> update_summary.md
          
          # Show updated packages
          echo "### 🔄 Updated Packages" >> update_summary.md
          if pnpm list --changed 2>/dev/null | head -20; then
            pnpm list --changed 2>/dev/null | head -20 >> update_summary.md
          else
            echo "Package changes detected in pnpm-lock.yaml" >> update_summary.md
          fi
          echo "" >> update_summary.md
          
          # Security status
          echo "### 🔒 Security Status" >> update_summary.md
          case "${{ env.security_status }}" in
            "clean")
              echo "✅ No security vulnerabilities detected" >> update_summary.md
              ;;
            "fixed")
              echo "🔧 Security vulnerabilities found and automatically fixed" >> update_summary.md
              ;;
            *)
              echo "ℹ️ Security audit completed" >> update_summary.md
              ;;
          esac
          echo "" >> update_summary.md
          
          # Test results
          echo "### 🧪 Quality Assurance" >> update_summary.md
          echo "✅ TypeScript compilation passed" >> update_summary.md
          echo "✅ ESLint validation passed" >> update_summary.md
          echo "✅ Code formatting validated" >> update_summary.md
          echo "✅ Translation validation passed" >> update_summary.md

      - name: 🚀 Create dependency update PR
        if: steps.outdated.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            📦 chore: Automated dependency updates (${{ github.event.inputs.update_type || 'minor' }})
            
            - Update ${{ github.event.inputs.update_type || 'minor' }} and patch versions
            - Run security audit and fixes
            - Validate with full test suite
            
            🤖 Generated by automated workflow
          title: "📦 Automated Dependency Updates (${{ github.event.inputs.update_type || 'minor' }})"
          body-path: update_summary.md
          branch: deps/automated-updates-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            ${{ github.event.inputs.update_type || 'minor' }}

      - name: 📝 Comment on no updates
        if: steps.outdated.outputs.has_updates == 'false'
        run: |
          echo "## ✅ No Updates Required" >> $GITHUB_STEP_SUMMARY
          echo "All dependencies are already up to date!" >> $GITHUB_STEP_SUMMARY
          echo "**Checked**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  security-only-updates:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 🔒 Security-only audit and fix
        run: |
          pnpm install --frozen-lockfile
          
          if ! pnpm audit --audit-level high; then
            echo "🔧 High-severity vulnerabilities found, creating emergency fix..."
            pnpm audit --fix
            
            # Create emergency security PR if fixes were applied
            if [[ -n "$(git status --porcelain)" ]]; then
              echo "emergency_fix_needed=true" >> $GITHUB_ENV
            fi
          fi

      - name: 🚨 Create emergency security fix PR
        if: env.emergency_fix_needed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🚨 security: Emergency security vulnerability fixes
            
            - Automated security audit and fix
            - High-severity vulnerabilities addressed
            - Requires immediate review and merge
            
            🤖 Generated by security automation
          title: "🚨 SECURITY: Emergency Vulnerability Fixes"
          body: |
            ## 🚨 Emergency Security Fix
            
            **Priority**: HIGH
            **Action Required**: Immediate review and merge
            
            This PR contains automated fixes for high-severity security vulnerabilities detected in dependencies.
            
            ### 🔍 Details
            - Vulnerabilities detected during scheduled security audit
            - Automated fixes applied where possible
            - All fixes verified with test suite
            
            ### ⚡ Next Steps
            1. Review the changes immediately
            2. Run additional security tests if needed
            3. Merge and deploy as soon as possible
            
            ---
            *This is an automated emergency security fix. Please prioritize review.*
          branch: security/emergency-fix-${{ github.run_number }}
          labels: |
            security
            high-priority
            emergency
          assignees: |
            ${{ github.actor }}