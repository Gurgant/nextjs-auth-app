name: 📚 Documentation Maintenance

on:
  schedule:
    # Run monthly on the 1st at 2 AM UTC
    - cron: "0 2 1 * *"
  workflow_dispatch:
    inputs:
      force_screenshot_update:
        description: "Force screenshot regeneration"
        required: false
        default: "false"
        type: boolean

jobs:
  documentation-maintenance:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_USER: postgres
          POSTGRES_DB: nextjs_auth_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: pnpm exec playwright install chromium

      - name: 🗄️ Setup database
        run: |
          DATABASE_URL="postgresql://postgres:postgres123@localhost:5433/nextjs_auth_db" pnpm prisma db push --skip-generate
          DATABASE_URL="postgresql://postgres:postgres123@localhost:5433/nextjs_auth_db" pnpm prisma generate

      - name: 🌱 Seed test data
        run: |
          DATABASE_URL="postgresql://postgres:postgres123@localhost:5433/nextjs_auth_db" pnpm exec tsx e2e/global-setup.ts

      - name: 📸 Generate fresh screenshots
        env:
          DATABASE_URL: "postgresql://postgres:postgres123@localhost:5433/nextjs_auth_db"
          DOCS_SCREENSHOTS: "true"
          NODE_ENV: "production"
          NEXTAUTH_SECRET: "docs-screenshot-secret-key"
          NEXTAUTH_URL: "http://localhost:3000"
        run: |
          echo "🚀 Starting documentation screenshot generation..."
          pnpm exec playwright test e2e/docs/documentation-screenshots.spec.ts --project=chromium-docs --reporter=line

      - name: 🔍 Validate documentation quality
        run: |
          echo "🔗 Validating README links..."
          # Check that all screenshots exist
          screenshots=(
            "docs/screenshots/hero.png"
            "docs/screenshots/signin.png"
            "docs/screenshots/dashboard-main.png"
            "docs/screenshots/dashboard-user.png" 
            "docs/screenshots/dashboard-pro.png"
            "docs/screenshots/dashboard-admin.png"
          )

          missing_screenshots=()
          for screenshot in "${screenshots[@]}"; do
            if [[ ! -f "$screenshot" ]]; then
              missing_screenshots+=("$screenshot")
            fi
          done

          if [[ ${#missing_screenshots[@]} -gt 0 ]]; then
            echo "❌ Missing screenshots:"
            printf '%s\n' "${missing_screenshots[@]}"
            exit 1
          fi

          echo "✅ All required screenshots are present"

      - name: 📏 Check screenshot sizes
        run: |
          echo "📊 Analyzing screenshot sizes..."
          for img in docs/screenshots/*.png; do
            size=$(stat -f%z "$img" 2>/dev/null || stat -c%s "$img" 2>/dev/null)
            size_mb=$((size / 1024 / 1024))
            if [[ $size_mb -gt 1 ]]; then
              echo "⚠️ Large screenshot detected: $img (${size_mb}MB)"
            else
              echo "✅ $img (${size_mb}MB)"
            fi
          done

      - name: 🚀 Create documentation update PR
        if: github.event_name == 'schedule' || github.event.inputs.force_screenshot_update == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            📚 docs: Automated documentation maintenance update

            - Regenerate screenshots with latest UI
            - Validate documentation quality
            - Optimize image sizes

            🤖 Generated by automated workflow
          title: "📚 Automated Documentation Maintenance"
          body: |
            ## 📚 Automated Documentation Maintenance

            This PR contains automated updates to maintain documentation quality:

            ### 📸 Screenshot Updates
            - ✅ Regenerated all documentation screenshots
            - ✅ Validated screenshot quality and sizes
            - ✅ Ensured consistent UI representation

            ### 🔍 Quality Checks
            - ✅ All required screenshots present
            - ✅ Image optimization verified
            - ✅ Documentation structure validated

            ### 🤖 Automation Details
            - **Triggered**: Scheduled maintenance workflow
            - **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            - **Screenshots**: $(find docs/screenshots -name "*.png" | wc -l) files updated

            **Review checklist:**
            - [ ] Screenshots accurately represent current UI
            - [ ] No sensitive information visible in captures
            - [ ] Image quality is appropriate for documentation

            ---
            *This PR was automatically generated by the documentation maintenance workflow.*
          branch: docs/automated-maintenance-${{ github.run_number }}
          delete-branch: true

  link-validation:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔗 Validate README links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          use-verbose-mode: "yes"
          config-file: ".github/markdown-link-check-config.json"

      - name: 📊 Generate link report
        run: |
          echo "## 🔗 Link Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "✅ All links in documentation are functional" >> $GITHUB_STEP_SUMMARY
          echo "📅 Validated on: $(date -u)" >> $GITHUB_STEP_SUMMARY
