import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { getToken } from 'next-auth/jwt'

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl
  
  // Skip middleware for API routes, static files, and auth pages
  if (
    pathname.startsWith('/api/') ||
    pathname.startsWith('/_next/') ||
    pathname.startsWith('/favicon') ||
    pathname.includes('/auth/') ||
    pathname.includes('/api/auth/') ||
    pathname === '/' ||
    pathname.match(/^\/[a-z]{2}$/) || // Locale root paths like /en, /es
    pathname.match(/^\/[a-z]{2}\/$/) // Locale root paths with trailing slash
  ) {
    return NextResponse.next()
  }

  // Get the token to check authentication status
  const token = await getToken({ 
    req: request,
    secret: process.env.NEXTAUTH_SECRET 
  })

  // If no token and trying to access protected routes, redirect to login
  if (!token && pathname.includes('/dashboard')) {
    const locale = pathname.split('/')[1] || 'en'
    return NextResponse.redirect(new URL(`/${locale}/auth/signin`, request.url))
  }

  // Check if user has incomplete 2FA - this is a server-side check
  // We can't access global.tempAuth2FA from middleware, so we'll rely on
  // the session blocking in the auth configuration
  if (token && (token as any).requires2FA) {
    // User has incomplete 2FA, redirect to 2FA page
    const locale = pathname.split('/')[1] || 'en'
    const userId = (token as any).userId
    const email = (token as any).email
    
    if (userId && email) {
      return NextResponse.redirect(
        new URL(`/${locale}/auth/2fa?userId=${encodeURIComponent(userId)}&email=${encodeURIComponent(email)}`, request.url)
      )
    }
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
}